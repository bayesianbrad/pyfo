

Ideas
-------
-------

For the state of the object, have something implemented like Sampyl.

State¶
State objects are used to store the current state of the Markov chain. States are subclassed from collections.OrderedDict so that the elements are in a known order.

class state.State(*args, **kwds)
State object for storing parameter values.

Inherits from OrderedDict.

freeze()
Return a immutable tuple of the state values.

static fromfunc(func)
Initialize a State from the arguments of a function

fromvector(vec)
Update the state using a numpy array.

Parameters:	vec – np.array for updating the state.
tovector()
Return the parameter values as a flat vector.

---------
Interface
---------
Interface by which to handle the logpdf and gradients

Model

The model is a class to make accessing log P(X) and grad log P(X) functions easier.
Models contain caches for both log P(X) and the gradient.

There are two models currently. Model expects separate log P(X) and gradient functions. SingleModel expects one function
that returns both log P(x) and the gradient.

        -------
        -class
            -methods
        --------
        - model.init_model(logp, grad_logp=None, grad_logp_flag=False)
        Initialize a model and return it.
        - model.Model(logp_func, grad_func=None, grad_logp_flag=False)¶
        A model for separate logp and grad_logp functions.
            -__call__(state)
            Return log P(X) and grad log P(X) given a state X
            - grad(state)
            Return grad log P(X) given a state X
            - logp(state)
            Return log P(X) given a state X

        -model.SingleModel(logp_func)
        A model for a logp function that returns both the cost function and the gradient.
        Caches values to improve performance.
            - same as above




========
Accessing Variable names within a function
========

def func_var_names(func):
    """ Returns a list of the argument names in func """
    names = func.__code__.co_varnames[:func.__code__.co_argcount]
    return names

 Note: __code__ allows you to extract information about the state of an object.
 See: https://stackoverflow.com/questions/196960/can-you-list-the-keyword-arguments-a-python-function-receives



 ========
 Running multiple chains
 ========

 Provided that the output of the code is the same as that of the outputs of Sampyl, we could easily just the parallel
 module from that code.
